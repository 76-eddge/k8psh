name: Build

on:
  push:
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - run: |
        sudo apt-get update
        sudo apt-get install cmake ninja-build

    - name: Build & Test
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=. -G Ninja .
        cmake --build build --target check install/strip

  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Test Dockerfile
      run: docker build . --tag 76eddge/k8psh --target deploy
      env:
        DOCKER_BUILDKIT: 1

    - name: Test Docker Image
      run: docker run --rm -t 76eddge/k8psh

    - name: Create Asset
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        CONTAINER_ID=$(docker create 76eddge/k8psh)
        docker cp ${CONTAINER_ID}:/bin bin
        docker rm ${CONTAINER_ID}
        cd bin
        tar -czf ../k8psh-linux.tar.gz *

    - name: Upload Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v0.1.5
      with:
        files: k8psh-linux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup QEMU
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/setup-qemu-action@v1.2.0
      with:
        platforms: all

    - name: Create BuildKit configuration
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "[worker.oci]" > buildkitd.toml
        echo "max-parallelism=1" >> buildkitd.toml

    - name: Setup Docker Buildx
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/setup-buildx-action@v1.3.0
      with:
        version: latest
        config: buildkitd.toml

    - name: Login to DockerHub
      if: startsWith(github.ref, 'refs/tags/')
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username 76eddge --password-stdin

    - name: Push Docker Images
      if: startsWith(github.ref, 'refs/tags/')
      run: docker buildx build . --tag 76eddge/k8psh --tag 76eddge/k8psh:${GITHUB_REF/refs\/tags\//} --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x --target deploy --push

  windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - run: choco install cmake ninja

    - name: Enable MSVC
      uses: ilammy/msvc-dev-cmd@v1.9.0
      with:
        toolset: "14.0"

    - name: Build & Test
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=MinSizeRel "-DCMAKE_INSTALL_PREFIX=." -G Ninja .
        cmake --build build --target check install

    - name: Create Asset
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd bin
        7z u -snh -mx9 ../k8psh-win.zip *

    - name: Upload Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v0.1.5
      with:
        files: k8psh-win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - run: |
        brew update
        brew install cmake ninja

    - name: Build & Test
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=. -G Ninja .
        cmake --build build --target check install/strip

    - name: Create Asset
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd bin
        tar -czf ../k8psh-mac.tar.gz *

    - name: Upload Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v0.1.5
      with:
        files: k8psh-mac.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
